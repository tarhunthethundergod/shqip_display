#include "TM1637Display.h"

// Define the connections pins:
#define CLK 2
#define DIO 3

// Create display object of type TM1637Display:
TM1637Display display = TM1637Display(CLK, DIO);;

uint8_t table[] = {
    //hgfedcba, cathode values
    0b00111111, // 0 - 48
    0b00000110, // 1 - 49
    0b01011011, // 2 - 50
    0b01001111, // 3 - 51
    0b01100110, // 4 - 52
    0b01101101, // 5 - 53
    0b01111101, // 6 - 54
    0b00000111, // 7 - 55
    0b01111111, // 8 - 56
    0b01101111, // 9 - 57
    0b01001000, // : - 58
    0b01001000, // ; - 59
    0b00111001, // < - 60
    0b01001000, // = - 61
    0b00001111, // > - 62
    0b01010011, // ? - 63
    0b01011111, // @ - 64
    0b01110111, // A - 65
    0b01111111, // B - 66
    0b00111001, // C - 67
    0b00011111, // D - 68
    0b01111001, // E - 69
    0b01110001, // F - 70
    0b00111101, // G - 71
    0b01110110, // H - 72
    0b00110000, // I - 73
    0b00001110, // J - 74
    0b01111010, // K - 75
    0b00111000, // L - 76
    0b00010101, // M - 77
    0b01110110, // N - 78
    0b00111111, // O - 79
    0b01110011, // P - 80
    0b00111011, // Q - 81
    0b01111011, // R - 82
    0b01101101, // S - 83
    0b00110001, // T - 84
    0b00111110, // U - 85
    0b00101110, // V - 86
    0b01101010, // W - 87
    0b01001001, // X - 88
    0b01101110, // Y - 89
    0b01011011, // Z - 90
    0b00111001, // [ - 91
    0b01100100, // \ - 92
    0b00001111, // ] - 93
    0b00100011, // ^ - 94
    0b00001000, // _ - 95
    0b00100000, // ` - 96
    0b01001100, // a - 97
    0b01111100, // b - 98
    0b01011000, // c - 99
    0b01011110, // d - 100
    0b00011000, // e - 101
    0b01110001, // f - 102
    0b01010001, // g - 103
    0b00110100, // h - 104
    0b00010000, // i - 105
    0b00001110, // j - 106
    0b01101001, // k - 107
    0b00110000, // l - 108
    0b00010101, // m - 109
    0b01010100, // n - 110
    0b01011100, // o - 111
    0b01110011, // p - 112
    0b01110111, // q - 113
    0b01010000, // r - 114
    0b01001000, // s - 115
    0b01111000, // t - 116
    0b00011100, // u - 117
    0b00001100, // v - 118
    0b00101010, // w - 119
    0b01001000, // x - 120
    0b01101110, // y - 121
    0b01001000, // z - 122
    0b00111001, // { - 123
    0b00110000, // | - 124
    0b00001111, // } - 125
    0b01000000, // ~ - 126
    0b00000000, //   - 127
    0b00000000, //   - 32
    0b00110000, // ! - 33
    0b00100010, // " - 34
    0b01000001, // # - 35
    0b01101101, // $ - 36
    0b01010010, // % - 37
    0b01111100, // & - 38
    0b00100000, // ' - 39
    0b00111001, // ( - 40
    0b00001111, // ) - 41
    0b00100001, // * - 42
    0b01110000, // + - 43
    0b00001000, // , - 44
    0b01000000, // - - 45
    0b00001000, // . - 46
    0b01010010  // / - 47
  };

uint8_t letter(char c) {
  if (c < 48)
    c += 40;
  else
    c -= 48;

  return *(table + c);
}

uint8_t data[][4] = {
  {letter('A'), letter('L'), letter('b'), letter('A')},
  {letter('L'), letter('b'), letter('A'), letter('n')},
  {letter('b'), letter('A'), letter('n'), letter('I')},
  {letter('A'), letter('n'), letter('I'), letter('A')},
  {letter('N'), letter('I'), letter('A'), 0},
  {letter('I'), letter('A'), 0, letter('A')},
  {letter('A'), 0, letter('A'), letter('L')},
  {0, letter('A'), letter('L'), letter('b')},
};

void setup() {
  // Init display object
  display.clear();
  display.setBrightness(2);
}

void loop() {
  // put your main code here, to run repeatedly:
  for (uint8_t i=0; i < 8; i++) {
    display.setSegments(data[i]);
    delay(400);
  }
}
